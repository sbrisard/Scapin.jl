/*
 * Prior to calling this script, the variable `d` must be defined (number of
 * spatial dimensions).
 */
if not member('d, values) then d : read("Please enter the value of d (number of spatial dimensions)");
if d = 2 then title : "# Quadrilateral element for linear 2d elasticity"
elseif d = 3 then title : "# Brick element for linear 3d elasticity"
else error();

linel : 999;

integrate_nd(expr, d) := if d = 1 then integrate(expr, x[1], 0, h[1]) else integrate(integrate_nd(expr, d-1), x[d], 0, h[d]);

print(title);
newline();
print("## Nomenclature");
newline();

print("### Coordinates of the current point");
newline();
print("```");
print(makelist(x[i], i, 1, d));
print("```");

newline();
print("### Dimensions of the element");
newline();
print("```");
print(makelist(h[i], i, 1, d));
print("```");

/* Useful sets */
C : setify(makelist(i, i, 1, d)); /* Components */
P : apply(cartesian_product, makelist({1, 2}, i, 1, d)); /* Nodes */
PxP : listify(cartesian_product(P, P));
CxP : listify(cartesian_product(C, P));
CxCxCxP : listify(cartesian_product(C, C, C, P));
CxPxCxP : listify(cartesian_product(C, P, C, P));
C : listify(C);
P : listify(P);

newline();
print("### Numbering of nodes");
newline();
node_coordinates(p) := makelist(x[i] = (p[i]-1)*h[i], i, 1, d);
print("```");
for p in P do block(
  print(concat("node", string(p = node_coordinates(p)))),
  newline());
print("```");

newline();
print("## Shape functions and interpolation of the displacements");
newline();

shape_1d : [lambda([xi], 1-xi), identity];
shape(p) := product(shape_1d[p[i]](x[i] / h[i]), i, 1, d);

print("```");
for p in P do block(
  print(concat("N", string(p = shape(p)))),
  newline());
print("```");

newline();
print("Testing numbering of vertices...");
test(p, q) := if subst(node_coordinates(p), shape(q)) # kron_delta(p, q) then error();
for k in PxP do apply(test, k);
kill(test);
print("OK");

u_[i] := lreduce("+", listify(map(lambda([p], shape(p) * u[i, p]), P)));

newline();
print("Testing that interpolated displacements are correct at vertices...");
test(i, p) := if subst(node_coordinates(p), u_[i]) # u[i, p] then error();
for k in CxP do apply(test, k);
kill(test);
print("OK");

reduced_coordinates : makelist(x[i] = xi[i] * h[i], i, 1, d);
newline();
print("We get the following expressions for the displacements");
newline();
print("```");
for i in C do block(
  print(concat("u", string([i] = subst(reduced_coordinates, u_[i])))),
  newline());
print("```");

newline();
print("## Interpolation of the strains");
newline();

eps[i, j] := (diff(u_[j], x[i]) + diff(u_[i], x[j])) / 2;
eps_avg[i, j] := expand(integrate_nd(eps[i, j], d) / product(h[i], i, 1, d));
B_[i, j, k, p] := coeff(eps_avg[i, j], u[k, p]);

print("```");
for i in CxCxCxP do print(string(arrayapply(B, flatten(i)) = arrayapply(B_, i)));
print("```");

newline();
print("## Stiffness matrix");
newline();
tr_eps : sum(eps[i, i], i, 1, d);
sig[i, j] := lambda_ * tr_eps * kron_delta(i, j) + 2 * mu * eps[i, j];

U_integrand : sum(sum(sig[i, j] * eps[i, j], j, 1, d), i, 1, d) / 2;
U : expand(integrate_nd(U_integrand, d));

K[i, p, j, q] := if p # q or i # j then expand(coeff(coeff(U, u[j, q]), u[i, p])) else expand(2 * coeff(U, u[i, p], 2));
K_I[i, p, j, q] := coeff(K[i, p, j, q], lambda_);
K_II[i, p, j, q] := coeff(K[i, p, j, q], mu);

print("Testing that elastic energy is retrieved from extracted stiffness matrix...");
res : lreduce("+", map(lambda([i], arrayapply(K, i)*u[i[1], i[2]]*u[i[3], i[4]]), CxPxCxP)) / 2 - U;
if expand(res) # 0 then error();
print("OK");

newline();
print("We get the following coefficients of the stiffness operator");

/*
print("```");
for i in NxCxNxC do print(concat("K_λ", string(flatten(i) = arrayapply(K_I, i))));
for i in NxCxNxC do print(concat("K_μ", string(flatten(i) = arrayapply(K_II, i))));
print("```");
*/

for i in CxPxCxP do block(
  K_I_[arrayapply(K_I, i)] : [],
  K_II_[arrayapply(K_II, i)] : []);

for i in CxPxCxP do block(
  [key],
  key: arrayapply(K_I, i),
  K_I_[key] : endcons(flatten(i), K_I_[key]),
  key: arrayapply(K_II, i),
  K_II_[key] : endcons(flatten(i), K_II_[key])
  );

print("```");
for key in map(first, rest(arrayinfo(K_I_), 2)) do block(
  newline(),
  print(concat("value = ", string(key))),
  for index in K_I_[key] do print(concat("K_λ", string(index), " = value")));

for key in map(first, rest(arrayinfo(K_II_), 2)) do block(
  newline(),
  print(concat("value = ", string(key))),
  for index in K_II_[key] do print(concat("K_μ", string(index), " = value")));
print("```");