using Base.Iterators
using LinearAlgebra

"""
    integrate(f, h)

Return the `N`-dimensional integral of `f` over `(0, h[1]) × (0, h[2]) × … × (0, h[N])`.

Uses 2-point Gauss-Legendre integration (tensorized over the `N` dimensions). `f` must
take a 1-dimensional array of size `N` as unique input. If `avg` is `true`, the
function returns the `N`-dimensional average.
"""
function integrate(f, h::AbstractArray{T,1}; avg = false) where {T<:Number}
    ndims = size(h, 1)
    nvertices = 2^ndims
    ξ = [(1 - 1 / sqrt(3)) / 2, (1 + 1 / sqrt(3)) / 2]
    weight = (avg ? one(T) : prod(h)) / nvertices
    x = map(collect, product((ξ .* hᵢ for hᵢ in h)...))
    return weight * sum(f, x)
end


"""
    shape(ξ, k)

Return the value of the shape functions or their derivatives, at the specified point.

The `ξ[i]` (`i = 1, …, d`) are the reduced coordinates, such that `0 ≤ ξ[i] ≤ 1`.

For `k == 0`, the function returns a vector `N`, such that `N[i]` is the value of the
`i`-th shape function at `ξ`. The shape functions are ordered using the column-major
convention. More precisely, if `ξ` are the reduced coordinates of a node (`ξ[i] ∈ {0, 1}`
for all `i = 1, …, d`), we can define the multi-index `I` such that `I[i] = ξ[i] + 1`.
Then, the index of the node under consideration can be found from

```
linear = LinearIndices(1:2, 1:2)      # d == 2
linear = LinearIndices(1:2, 1:2, 1:2) # d == 3
index = linear(I...)
```

For `k == 1, …, d`, the function returns the vector of the derivatives of the shape
functions at `ξ`, with respect to `ξ[k]`.

"""
function shape(ξ::AbstractArray{T,1}, k::Int) where {T<:Number}
    d = size(ξ, 1)
    N = Array{T}(undef, d, 2)
    for i = 1:d
        N[i, 1] = k == i ? -one(T) : 1 - ξ[i]
        N[i, 2] = k == i ? one(T) : ξ[i]
    end
    ranges = Tuple(fill(1:2, d))
    cartesian = CartesianIndices(ranges)
    [prod(N[i, cartesian[j][i]] for i = 1:d) for j = 1:length(cartesian)]
end

"""
    strain_displacement_matrix(x, h)

Return the strain-displacement matrix for the `d`-dimensional element of size `h`.

The strain-displacement matrix `B` is such that `B * q` is the strain at point `x`
(`d × d` matrix). Note that the degrees of freedom are ordered as follows

```
q = [u₁, v₁, u₂, v₂, u₃, v₃, u₄, v₄]           (2d)
q = [u₁, v₁, w₁, u₂, v₂, w₂, …, u₈, v₈, w₈]    (3d)
```

where `uₖ`, `vₖ` and `wₖ` are the components of the displacement of node `k` in the `x`,
`y` and `z` directions, respectively.
"""
function strain_displacement_matrix(
    x::AbstractVector{T},
    h::AbstractVector{T},
) where {T<:Number}
    d = size(x, 1)
    @assert size(h, 1) == d "x and h must have same size"
    nvertices = 2^d
    ndofs = d * nvertices

    ξ = x ./ h
    ∂ = hcat((shape(ξ, i) ./ h[i] for i = 1:d)...)
    u = zeros(T, d, nvertices, ndofs)
    for i = 1:d, j = 1:nvertices
        u[i, j, d*(j-1)+i] = one(T)
    end
    B = Array{T}(undef, d, d, ndofs)
    for i = 1:d, j = 1:d
        B[i, j, :] = (∂[:, i]' * u[j, :, :] + ∂[:, j]' * u[i, :, :]) / 2
    end
    return B
end


"""
    avg_strain_displacement_matrix(h)

Return the strain-displacement matrix, averaged over the whole element.
"""
function avg_strain_displacement_matrix(h::AbstractArray{T,1}) where {T<:Number}
    return integrate(x -> strain_displacement_matrix(x, h), h, avg = true)
end

function stiffness_matrix(h::AbstractArray{T,1}, μ::T, ν::T) where {T<:Number}
    d = size(h, 1)
    ndofs = d * 2^d
    λ = 2μ * ν / (1 - 2ν)
    function f(x)
        B = strain_displacement_matrix(x, h)
        tr_B = [tr(B[:, :, i]) for i = 1:ndofs]
        Ke = Array{T}(undef, ndofs, ndofs)
        for i = 1:ndofs, j = 1:ndofs
            Ke[i, j] =
                λ * tr_B[i] * tr_B[j] +
                2μ * sum(B[h, k, i] * B[h, k, j] for h = 1:d, k = 1:d)
        end
        return Ke
    end
    integrate(f, h)
end


@testset "integrate" begin
    h = [1.1, 1.2, 1.3]
    n = [1.0, 2.0, 3.0]
    f(x) = prod(x .^ n)
    actual = integrate(f, h)
    expected = prod((h .^ (n .+ 1)) ./ (n .+ 1))
    @test isapprox(actual, expected, rtol = 1e-15)
end

for d = 1:3
    @testset "Node numbering, $(d)d" begin
        ranges = Tuple(fill(1:2, d))
        linear = LinearIndices(ranges)
        actual = zeros(Int, length(linear), length(linear))
        for ξ in map(collect, product(fill((0, 1), d)...))
            actual[:, linear[(ξ .+ 1)...]] = shape(ξ, 0)
        end
        @test actual == I
    end
end

@testset "Average strain-displacement matrix, 2d" begin
    h = [1.1, 1.2]
    # Note: reference values where computed with maxima, using the
    # Kelvin–Mandel representation and a different numbering of dofs.
    nodes = [1, 5, 3, 7, 2, 6, 4, 8]
    B_exp = [
        -0.4545454545454545 -0.4545454545454545 0.4545454545454545 0.4545454545454545 0.0 0.0 0.0 0.0
        0.0 0.0 0.0 0.0 -0.4166666666666667 0.4166666666666667 -0.4166666666666667 0.4166666666666667
        -0.2946278254943947 0.2946278254943947 -0.2946278254943947 0.2946278254943947 -0.3214121732666125 -0.3214121732666125 0.3214121732666125 0.3214121732666125
    ]
    B_act = avg_strain_displacement_matrix(h)

    @test isapprox(B_act[1, 1, nodes], B_exp[1, :], rtol = 1e-15)
    @test isapprox(B_act[2, 2, nodes], B_exp[2, :], rtol = 1e-15)
    @test isapprox(B_act[1, 2, nodes], B_exp[3, :] / sqrt(2), rtol = 1e-15)
end

@testset "Average strain-displacement matrix, 3d" begin
    h = [1.1, 1.2, 1.3]
    # Note: reference values where computed with maxima, using the
    # Kelvin–Mandel representation and a different numbering of dofs.
    nodes = vcat(
        [1, 13, 7, 19, 4, 16, 10, 22],
        [2, 14, 8, 20, 5, 17, 11, 23],
        [3, 15, 9, 21, 6, 18, 12, 24],
    )
    B_exp = [
        -0.2272727272727273 -0.2272727272727273 -0.2272727272727273 -0.2272727272727273 0.2272727272727273 0.2272727272727273 0.2272727272727273 0.2272727272727273 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.2083333333333333 -0.2083333333333333 0.2083333333333333 0.2083333333333333 -0.2083333333333333 -0.2083333333333333 0.2083333333333333 0.2083333333333333 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.1923076923076923 0.1923076923076923 -0.1923076923076923 0.1923076923076923 -0.1923076923076923 0.1923076923076923 -0.1923076923076923 0.1923076923076923
        0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.1359820733051053 0.1359820733051053 -0.1359820733051053 0.1359820733051053 -0.1359820733051053 0.1359820733051053 -0.1359820733051053 0.1359820733051053 -0.1473139127471974 -0.1473139127471974 0.1473139127471974 0.1473139127471974 -0.1473139127471974 -0.1473139127471974 0.1473139127471974 0.1473139127471974
        -0.1359820733051053 0.1359820733051053 -0.1359820733051053 0.1359820733051053 -0.1359820733051053 0.1359820733051053 -0.1359820733051053 0.1359820733051053 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.1607060866333062 -0.1607060866333062 -0.1607060866333062 -0.1607060866333062 0.1607060866333062 0.1607060866333062 0.1607060866333062 0.1607060866333062
        -0.1473139127471974 -0.1473139127471974 0.1473139127471974 0.1473139127471974 -0.1473139127471974 -0.1473139127471974 0.1473139127471974 0.1473139127471974 -0.1607060866333062 -0.1607060866333062 -0.1607060866333062 -0.1607060866333062 0.1607060866333062 0.1607060866333062 0.1607060866333062 0.1607060866333062 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0
    ]
    B_act = avg_strain_displacement_matrix(h)

    @test isapprox(B_act[1, 1, nodes], B_exp[1, :], rtol = 1e-15)
    @test isapprox(B_act[2, 2, nodes], B_exp[2, :], rtol = 1e-15)
    @test isapprox(B_act[3, 3, nodes], B_exp[3, :], rtol = 1e-15)
    @test isapprox(B_act[2, 3, nodes], B_exp[4, :] / sqrt(2), rtol = 1e-15)
    @test isapprox(B_act[3, 1, nodes], B_exp[5, :] / sqrt(2), rtol = 1e-15)
    @test isapprox(B_act[1, 2, nodes], B_exp[6, :] / sqrt(2), rtol = 1e-15)
end

@testset "Stiffness matrix, 2d" begin
    h = [1.1, 1.2]
    μ = 5.6
    ν = 0.3
    # Note: reference values where computed with maxima, using the
    # Kelvin–Mandel representation and a different numbering of dofs.
    nodes = [1, 5, 3, 7, 2, 6, 4, 8]
    K_exp = [
        8.83838383838384 1.852525252525252 -6.271717171717172 -4.41919191919192 3.5 -0.7 0.7 -3.5
        1.852525252525252 8.83838383838384 -4.41919191919192 -6.271717171717172 0.7 -3.5 3.5 -0.7
        -6.271717171717172 -4.41919191919192 8.83838383838384 1.852525252525252 -0.7 3.5 -3.5 0.7
        -4.41919191919192 -6.271717171717172 1.852525252525252 8.83838383838384 -3.5 0.7 -0.7 3.5
        3.5 0.7 -0.7 -3.5 8.025252525252526 -4.97070707070707 0.9580808080808081 -4.012626262626263
        -0.7 -3.5 3.5 0.7 -4.97070707070707 8.025252525252526 -4.012626262626263 0.9580808080808081
        0.7 3.5 -3.5 -0.7 0.9580808080808081 -4.012626262626263 8.025252525252526 -4.97070707070707
        -3.5 -0.7 0.7 3.5 -4.012626262626263 0.9580808080808081 -4.97070707070707 8.025252525252526
    ]

    K_act = stiffness_matrix(h, μ, ν)

    @test isapprox(K_act[nodes, nodes], K_exp, rtol = 1e-15)
end


@testset "Stiffness matrix, 3d" begin
    h = [1.1, 1.2, 1.3]
    μ = 5.6
    ν = 0.3
    # Note: reference values where computed with maxima, using the
    # Kelvin–Mandel representation and a different numbering of dofs.
    nodes = vcat(
        [1, 13, 7, 19, 4, 16, 10, 22],
        [2, 14, 8, 20, 5, 17, 11, 23],
        [3, 15, 9, 21, 6, 18, 12, 24],
    )

    K_exp = [
        4.461761201761202 1.283188293188293 1.118658378658379 0.08548303548303549 -2.401846671846672 -1.67476948976949 -1.757034447034447 -1.1154403004403 1.516666666666667 0.7583333333333333 -0.3033333333333333 -0.1516666666666667 0.3033333333333333 0.1516666666666667 -1.516666666666667 -0.7583333333333333 1.4 -0.28 0.7 -0.14 0.28 -1.4 0.14 -0.7
        1.283188293188293 4.461761201761202 0.08548303548303549 1.118658378658379 -1.67476948976949 -2.401846671846672 -1.1154403004403 -1.757034447034447 0.7583333333333333 1.516666666666667 -0.1516666666666667 -0.3033333333333333 0.1516666666666667 0.3033333333333333 -0.7583333333333333 -1.516666666666667 0.28 -1.4 0.14 -0.7 1.4 -0.28 0.7 -0.14
        1.118658378658379 0.08548303548303549 4.461761201761202 1.283188293188293 -1.757034447034447 -1.1154403004403 -2.401846671846672 -1.67476948976949 0.3033333333333333 0.1516666666666667 -1.516666666666667 -0.7583333333333333 1.516666666666667 0.7583333333333333 -0.3033333333333333 -0.1516666666666667 0.7 -0.14 1.4 -0.28 0.14 -0.7 0.28 -1.4
        0.08548303548303549 1.118658378658379 1.283188293188293 4.461761201761202 -1.1154403004403 -1.757034447034447 -1.67476948976949 -2.401846671846672 0.1516666666666667 0.3033333333333333 -0.7583333333333333 -1.516666666666667 0.7583333333333333 1.516666666666667 -0.1516666666666667 -0.3033333333333333 0.14 -0.7 0.28 -1.4 0.7 -0.14 1.4 -0.28
        -2.401846671846672 -1.67476948976949 -1.757034447034447 -1.1154403004403 4.461761201761202 1.283188293188293 1.118658378658379 0.08548303548303549 -0.3033333333333333 -0.1516666666666667 1.516666666666667 0.7583333333333333 -1.516666666666667 -0.7583333333333333 0.3033333333333333 0.1516666666666667 -0.28 1.4 -0.14 0.7 -1.4 0.28 -0.7 0.14
        -1.67476948976949 -2.401846671846672 -1.1154403004403 -1.757034447034447 1.283188293188293 4.461761201761202 0.08548303548303549 1.118658378658379 -0.1516666666666667 -0.3033333333333333 0.7583333333333333 1.516666666666667 -0.7583333333333333 -1.516666666666667 0.1516666666666667 0.3033333333333333 -1.4 0.28 -0.7 0.14 -0.28 1.4 -0.14 0.7
        -1.757034447034447 -1.1154403004403 -2.401846671846672 -1.67476948976949 1.118658378658379 0.08548303548303549 4.461761201761202 1.283188293188293 -1.516666666666667 -0.7583333333333333 0.3033333333333333 0.1516666666666667 -0.3033333333333333 -0.1516666666666667 1.516666666666667 0.7583333333333333 -0.14 0.7 -0.28 1.4 -0.7 0.14 -1.4 0.28
        -1.1154403004403 -1.757034447034447 -1.67476948976949 -2.401846671846672 0.08548303548303549 1.118658378658379 1.283188293188293 4.461761201761202 -0.7583333333333333 -1.516666666666667 0.1516666666666667 0.3033333333333333 -0.1516666666666667 -0.3033333333333333 0.7583333333333333 1.516666666666667 -0.7 0.14 -1.4 0.28 -0.14 0.7 -0.28 1.4
        1.516666666666667 0.7583333333333333 0.3033333333333333 0.1516666666666667 -0.3033333333333333 -0.1516666666666667 -1.516666666666667 -0.7583333333333333 4.109404299404299 1.107009842009842 -1.838075628075628 -1.392883967883968 0.7310657860657861 -0.1083132608132608 -1.580855995855996 -1.027351074851075 1.283333333333333 -0.2566666666666667 0.2566666666666667 -1.283333333333333 0.6416666666666667 -0.1283333333333333 0.1283333333333333 -0.6416666666666667
        0.7583333333333333 1.516666666666667 0.1516666666666667 0.3033333333333333 -0.1516666666666667 -0.3033333333333333 -0.7583333333333333 -1.516666666666667 1.107009842009842 4.109404299404299 -1.392883967883968 -1.838075628075628 -0.1083132608132608 0.7310657860657861 -1.027351074851075 -1.580855995855996 0.2566666666666667 -1.283333333333333 1.283333333333333 -0.2566666666666667 0.1283333333333333 -0.6416666666666667 0.6416666666666667 -0.1283333333333333
        -0.3033333333333333 -0.1516666666666667 -1.516666666666667 -0.7583333333333333 1.516666666666667 0.7583333333333333 0.3033333333333333 0.1516666666666667 -1.838075628075628 -1.392883967883968 4.109404299404299 1.107009842009842 -1.580855995855996 -1.027351074851075 0.7310657860657861 -0.1083132608132608 -0.2566666666666667 1.283333333333333 -1.283333333333333 0.2566666666666667 -0.1283333333333333 0.6416666666666667 -0.6416666666666667 0.1283333333333333
        -0.1516666666666667 -0.3033333333333333 -0.7583333333333333 -1.516666666666667 0.7583333333333333 1.516666666666667 0.1516666666666667 0.3033333333333333 -1.392883967883968 -1.838075628075628 1.107009842009842 4.109404299404299 -1.027351074851075 -1.580855995855996 -0.1083132608132608 0.7310657860657861 -1.283333333333333 0.2566666666666667 -0.2566666666666667 1.283333333333333 -0.6416666666666667 0.1283333333333333 -0.1283333333333333 0.6416666666666667
        0.3033333333333333 0.1516666666666667 1.516666666666667 0.7583333333333333 -1.516666666666667 -0.7583333333333333 -0.3033333333333333 -0.1516666666666667 0.7310657860657861 -0.1083132608132608 -1.580855995855996 -1.027351074851075 4.109404299404299 1.107009842009842 -1.838075628075628 -1.392883967883968 0.6416666666666667 -0.1283333333333333 0.1283333333333333 -0.6416666666666667 1.283333333333333 -0.2566666666666667 0.2566666666666667 -1.283333333333333
        0.1516666666666667 0.3033333333333333 0.7583333333333333 1.516666666666667 -0.7583333333333333 -1.516666666666667 -0.1516666666666667 -0.3033333333333333 -0.1083132608132608 0.7310657860657861 -1.027351074851075 -1.580855995855996 1.107009842009842 4.109404299404299 -1.392883967883968 -1.838075628075628 0.1283333333333333 -0.6416666666666667 0.6416666666666667 -0.1283333333333333 0.2566666666666667 -1.283333333333333 1.283333333333333 -0.2566666666666667
        -1.516666666666667 -0.7583333333333333 -0.3033333333333333 -0.1516666666666667 0.3033333333333333 0.1516666666666667 1.516666666666667 0.7583333333333333 -1.580855995855996 -1.027351074851075 0.7310657860657861 -0.1083132608132608 -1.838075628075628 -1.392883967883968 4.109404299404299 1.107009842009842 -0.1283333333333333 0.6416666666666667 -0.6416666666666667 0.1283333333333333 -0.2566666666666667 1.283333333333333 -1.283333333333333 0.2566666666666667
        -0.7583333333333333 -1.516666666666667 -0.1516666666666667 -0.3033333333333333 0.1516666666666667 0.3033333333333333 0.7583333333333333 1.516666666666667 -1.027351074851075 -1.580855995855996 -0.1083132608132608 0.7310657860657861 -1.392883967883968 -1.838075628075628 1.107009842009842 4.109404299404299 -0.6416666666666667 0.1283333333333333 -0.1283333333333333 0.6416666666666667 -1.283333333333333 0.2566666666666667 -0.2566666666666667 1.283333333333333
        1.4 0.28 0.7 0.14 -0.28 -1.4 -0.14 -0.7 1.283333333333333 0.2566666666666667 -0.2566666666666667 -1.283333333333333 0.6416666666666667 0.1283333333333333 -0.1283333333333333 -0.6416666666666667 3.835187775187775 -1.399329189329189 0.8053716653716654 -1.255775705775706 0.593957523957524 -1.361482776482776 -0.2591323491323491 -0.9587969437969438
        -0.28 -1.4 -0.14 -0.7 1.4 0.28 0.7 0.14 -0.2566666666666667 -1.283333333333333 1.283333333333333 0.2566666666666667 -0.1283333333333333 -0.6416666666666667 0.6416666666666667 0.1283333333333333 -1.399329189329189 3.835187775187775 -1.255775705775706 0.8053716653716654 -1.361482776482776 0.593957523957524 -0.9587969437969438 -0.2591323491323491
        0.7 0.14 1.4 0.28 -0.14 -0.7 -0.28 -1.4 0.2566666666666667 1.283333333333333 -1.283333333333333 -0.2566666666666667 0.1283333333333333 0.6416666666666667 -0.6416666666666667 -0.1283333333333333 0.8053716653716654 -1.255775705775706 3.835187775187775 -1.399329189329189 -0.2591323491323491 -0.9587969437969438 0.593957523957524 -1.361482776482776
        -0.14 -0.7 -0.28 -1.4 0.7 0.14 1.4 0.28 -1.283333333333333 -0.2566666666666667 0.2566666666666667 1.283333333333333 -0.6416666666666667 -0.1283333333333333 0.1283333333333333 0.6416666666666667 -1.255775705775706 0.8053716653716654 -1.399329189329189 3.835187775187775 -0.9587969437969438 -0.2591323491323491 -1.361482776482776 0.593957523957524
        0.28 1.4 0.14 0.7 -1.4 -0.28 -0.7 -0.14 0.6416666666666667 0.1283333333333333 -0.1283333333333333 -0.6416666666666667 1.283333333333333 0.2566666666666667 -0.2566666666666667 -1.283333333333333 0.593957523957524 -1.361482776482776 -0.2591323491323491 -0.9587969437969438 3.835187775187775 -1.399329189329189 0.8053716653716654 -1.255775705775706
        -1.4 -0.28 -0.7 -0.14 0.28 1.4 0.14 0.7 -0.1283333333333333 -0.6416666666666667 0.6416666666666667 0.1283333333333333 -0.2566666666666667 -1.283333333333333 1.283333333333333 0.2566666666666667 -1.361482776482776 0.593957523957524 -0.9587969437969438 -0.2591323491323491 -1.399329189329189 3.835187775187775 -1.255775705775706 0.8053716653716654
        0.14 0.7 0.28 1.4 -0.7 -0.14 -1.4 -0.28 0.1283333333333333 0.6416666666666667 -0.6416666666666667 -0.1283333333333333 0.2566666666666667 1.283333333333333 -1.283333333333333 -0.2566666666666667 -0.2591323491323491 -0.9587969437969438 0.593957523957524 -1.361482776482776 0.8053716653716654 -1.255775705775706 3.835187775187775 -1.399329189329189
        -0.7 -0.14 -1.4 -0.28 0.14 0.7 0.28 1.4 -0.6416666666666667 -0.1283333333333333 0.1283333333333333 0.6416666666666667 -1.283333333333333 -0.2566666666666667 0.2566666666666667 1.283333333333333 -0.9587969437969438 -0.2591323491323491 -1.361482776482776 0.593957523957524 -1.255775705775706 0.8053716653716654 -1.399329189329189 3.835187775187775
    ]

    K_act = stiffness_matrix(h, μ, ν)

    @test isapprox(K_act[nodes, nodes], K_exp, rtol = 1e-15)
end


# @testset "bri17, 2D" begin
#     C = Hooke{Float64, 2}(5.6, 0.3)
#     N = [2, 4]
#     h = [1.1, 1.2]
# end
