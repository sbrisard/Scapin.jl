module Brick

using Base.Iterators
using LinearAlgebra
using Scapin.Grid

"""
    integrate(f, h)

Return the `N`-dimensional integral of `f` over `(0, h[1]) √ó (0, h[2]) √ó ‚Ä¶ √ó (0, h[N])`.

Uses 2-point Gauss-Legendre integration (tensorized over the `N` dimensions). `f` must
take a 1-dimensional array of size `N` as unique input. If `avg` is `true`, the
function returns the `N`-dimensional average.
"""
function integrate(f, h::AbstractArray{T,1}; avg = false) where {T<:Number}
    d = size(h, 1)
    Œæ = [-1 / sqrt(3), 1 / sqrt(3)]
    weight = (avg ? one(T) : prod(h)) / 2^d
    x = map(collect, product((Œæ .* h_ / 2 for h_ in h)...))
    return weight * sum(f, x)
end


"""
    shape(x, h)

Return the value of the shape functions of the element, at the specified point.

This function returns a `d`-dimensional array `N`, such that `N[n]` is the shape
function associated with node `n`, evaluated at `x`. In particular, `N[n]`
evaluated at node `m` is `Œ¥[m, n]` (Kronecker).

See ‚Äú[Shape functions](@ref _20210910114136)‚Äù in the docs.

"""
function shape(x::AbstractArray{T,1}, h::AbstractArray{T,1}) where {T<:Number}
    d = size(x, 1)
    # TODO ‚Äî Check that x and h have same size
    Œæ = 2 * x ./ h
    ùîë = cell_vertices(d)
    return [prod((1 + (-1)^n[i] * Œæ[i]) / 2 for i = 1:d) for n in ùîë]
end

"""
    gradient_operator(x, h)

Return the gradient operator at the specified point.

This function returns a `(d+1)` dimensional array `D` of size `(d, 2, 2, ‚Ä¶)`.
If `n` is the multi-index of the node, and `i` is the index of a component, then
`D[i, n]` is the partial derivative of `N[n]` w.r.t. `x[i]`, evaluated at `x`.

`h` is the size of the brick element.

See ‚Äú[Geometry of the reference brick element](@ref _20210910120306)‚Äù.
"""
function gradient_operator(x::AbstractVector{T}, h::AbstractVector{T}) where {T<:Number}
    d = size(x, 1)
    # TODO ‚Äî Check that x and h have same size
    Œæ = 2 * x ./ h
    ùîë = cell_vertices(d)
    return [
        prod(j == i ? (-1)^n[j] / h[j] : (1 + (-1)^n[j] * Œæ[j]) / 2 for j = 1:d) for
        i = 1:d, n in ùîë
    ]
end


"""
    avg_gradient_operator(h)

Return the cell average of the gradient operator.
"""
function avg_gradient_operator(h::AbstractArray{T,1}) where {T<:Number}
    return integrate(x -> gradient_operator(x, h), h, avg = true)
end


"""
    strain_displacement_operator(x, h)

Return the strain-displacement operator for the `d`-dimensional brick element of
size `h`, evaluated at point `x`.

This function returns a `(d+3)` dimensional array `B` of size `(d, d, 2, ‚Ä¶, 2, d)`.
If `n` is the multi-index of the node, and `i`, `j`, `k` are component indices
then, the interpolated `(i, j)` component of the strain at `x` reads

```
Œµ[i, j] = Œ£‚Çô Œ£‚Çñ B[i, j, n, k] * u[n, k].
```

See ‚Äú[Gradient and strain-displacement operators](@ref _20210910114926)‚Äù.
"""
function strain_displacement_operator(
    x::AbstractVector{T},
    h::AbstractVector{T},
) where {T<:Number}
    d = size(x, 1)
    @assert size(h, 1) == d "x and h must have same size"

    ùîë = cell_vertices(d)
    D = gradient_operator(x, h)
    B = zeros(T, d, d, fill(2, d)..., d)
    for i = 1:d, j = 1:d, n ‚àà ùîë
        B[i, j, n, i] += D[j, n] / 2
        B[i, j, n, j] += D[i, n] / 2
    end
    return B
end


"""
    avg_strain_displacement_operator(h)

Return the cell average of the strain-displacement operator.
"""
function avg_strain_displacement_operator(h::AbstractArray{T,1}) where {T<:Number}
    return integrate(x -> strain_displacement_operator(x, h), h, avg = true)
end

function stiffness_operator(h::AbstractArray{T,1}, Œº::T, ŒΩ::T) where {T<:Number}
    # Œµ‚Çï‚Çñ = Œ£‚Çô‚±º B[h, k, n, j] * u[n, j]
    #
    # tr(Œµ) = Œ£‚Çô‚±º‚Çñ B[k, k, n, j] * u[n, j]
    #       = Œ£‚Çô‚±º tr_B[n, j] * u[n, j]
    #
    # where
    #
    # tr_B[n, j] = Œ£‚Çñ B[k, k, n, j]
    #
    # œÉ‚Çï‚Çñ = Œª ‚ãÖ tr(Œµ) ‚ãÖ Œ¥‚Çï‚Çñ + 2Œº ‚ãÖ Œµ‚Çï‚Çñ
    #     = Œ£‚Çò·µ¢ {Œª * tr_B[m, i] * Œ¥[h, k] + 2 * Œº * B[h, k, m, i]} * u[m, i]
    #
    # ¬Ω œÉ : Œµ
    # = ¬Ω Œ£‚Çò·µ¢‚Çô‚±º‚Çï‚Çñ {Œª * tr_B[m, i] * Œ¥[h, k] + 2 * Œº * B[h, k, m, i]} * B[h, k, n, j]
    #             * u[m, i] * u[n, j]
    # = ¬Ω Œ£‚Çò·µ¢‚Çô‚±º {Œª *  tr_B[m, i] * tr_B[n, j] + 2Œº * Œ£‚Çï‚Çñ B[h, k, m, i] * B[h, k, n, j]}
    #           * u[m, i] * u[n, j]
    #
    # K‚Çò·µ¢‚Çô‚±º = ‚à´ {Œª *  tr_B[m, i] * tr_B[n, j] + 2Œº * Œ£‚Çï‚Çñ B[h, k, m, i] * B[h, k, n, j]}

    d = size(h, 1)
    nodes = CartesianIndices(Tuple(fill(1:2, d)))
    Œª = 2Œº * ŒΩ / (1 - 2ŒΩ)
    function f(x)
        B = strain_displacement_operator(x, h)
        tr_B = [tr(B[:, :, n, i]) for n ‚àà nodes, i = 1:d]
        œÉŒµ = Array{T}(undef, fill(2, d)..., d, fill(2, d)..., d)
        for m ‚àà nodes, i = 1:d, n ‚àà nodes, j = 1:d
            œÉŒµ[m, i, n, j] =
                Œª * tr_B[m, i] * tr_B[n, j] +
                2Œº * sum(B[h, k, m, i] * B[h, k, n, j] for h = 1:d, k = 1:d)
        end
        return œÉŒµ
    end
    integrate(f, h)
end

"""
    global_stiffness_matrix(N, h, Œº, ŒΩ)

Return the global stiffness matrix for periodic, homogeneous elasticity.

- `N`: grid size
- `h`: cell size
- `Œº`: shear modulus
- `ŒΩ`: Poisson ratio

"""
# function global_stiffness_operator(
#     N::AbstractVector{Int},
#     h::AbstractVector{T},
#     Œº::T,
#     ŒΩ::T,
# ) where {T<:Number}
#     d = size(N, 1)
#     cartesian = map(collect‚àòTuple, CartesianIndices(Tuple(N)))
#     linear = LinearIndices(Tuple(N))
#     Ke = stiffness_operator(h, Œº, ŒΩ)
#     K = zeros(T, N..., d, N..., d)
#     for e ‚àà cartesian
#         nodes = element_nodes(e, N)
#         K[nodes, :, nodes, :] += Ke
#     end
#     return K
# end

export integrate, shape, gradient_operator, avg_gradient_operator, strain_displacement_operator, avg_strain_displacement_operator, stiffness_operator
end
