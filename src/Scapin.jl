module Scapin

using Base.Iterators
using FFTW
using LinearAlgebra

"""
    dimensionality(op)

Return the number of dimensions of the physical space that `op` operates on.
"""
function dimensionality end


"""
    grid_size(‚Ñ±)

Return the size of the grid the discrete operator `‚Ñ±` operates on.
"""
function grid_size(‚Ñ±) end


"""
    apply_fourier!(yÃÇ, ‚Ñ±, k, xÃÇ) -> yÃÇ

Apply in-place operator `‚Ñ±` to `xÃÇ` in Fourier space and return the modified array `yÃÇ`.
More specifically,

    yÃÇ[:] = ‚Ñ±ÃÇ(k)‚ãÖxÃÇ,

where `k`, `xÃÇ` and `yÃÇ` are column vectors: `k` is the vector of spatial
frequencies and `xÃÇ` (resp. `yÃÇ`) is the Fourier mode of the input (resp. output),
for the spatial frequency `k`. The following must hold

    size(k, 1) == dimensionality(‚Ñ±),
    size(xÃÇ, 1) == size(‚Ñ±, 2),
    size(yÃÇ, 1) == size(‚Ñ±, 1).

The input vector `xÃÇ` is an array of type `T` or `complex(T)`, where
`T¬†==¬†eltype(‚Ñ±)`. The output vector `yÃÇ` can always be of type `complex(T)`. When
the Fourier coefficient `‚Ñ±ÃÇ(k)` of the operator is real, it might make sense to
allow for `yÃÇ` to be of type `real(T)`. If this is disallowed, calling this
function should raise an exception.

!!! note "Continuous and discrete operators"

    For continuous operators, `k` would typically be a real-valued vector of wave
    numbers, while for discrete operators, `k` would be a integer-valued vector
    of indices.

!!! danger "Overriding the input vector"

    The present method *must* be implemented in such a way that aliasing `yÃÇ`
    with `xÃÇ` is permitted. In other words, calling `apply_fourier!(xÃÇ, ‚Ñ±, k, xÃÇ)`
    *must* always deliver the correct answer, provided that this operation is
    allowed type-wise (when `xÃÇ` is of type `real(T)`.

"""
function apply_fourier! end


"""
    apply_fourier(‚Ñ±, k, xÃÇ)

Apply operator `‚Ñ±` to `xÃÇ` in Fourier space and return the result. The returned
vector is promoted from `complex(T)`.

See [apply_fourier!](@ref)

"""
function apply_fourier(‚Ñ±, k, xÃÇ)
    T = promote_type(eltype(‚Ñ±), eltype(xÃÇ), eltype(k))
    yÃÇ = Array{T}(undef, size(‚Ñ±, 1))
    return apply_fourier!(yÃÇ, ‚Ñ±, k, xÃÇ)
end

"""
    fourier_matrix!(FÃÇ, ‚Ñ±, k) -> FÃÇ


Compute in-place the `k`-th mode of `‚Ñ±`, `‚Ñ±ÃÇ(k)`, as a matrix `FÃÇ`.

In general, the coefficients of `FÃÇ` should be s of type
`complex(eltype(‚Ñ±))`. However, the Fourier coefficients of the operator ‚Ñ± might
be real, in which case, `eltype(FÃÇ)¬†==¬†real(eltype(‚Ñ±))` might be allowed.

!!! note "Performance of the default implementation"

    The default implementation relies on [apply_fourier!](@ref) to build the
    matrix column-by-column. It might be inefficient.

"""
function fourier_matrix!(FÃÇ, ‚Ñ±, k)
    nrows, ncols = size(‚Ñ±)
    T = eltype(FÃÇ)
    xÃÇ = zeros(T, ncols)
    for i = 1:ncols
        xÃÇ[i] = one(T)
        apply_fourier!(view(FÃÇ, :, i), ‚Ñ±, k, xÃÇ)
        xÃÇ[i] = zero(T)
    end
    return FÃÇ
end


"""
    fourier_matrix(‚Ñ±, k)

Return the `k`-th mode of `‚Ñ±`, `‚Ñ±ÃÇ(k)`, as a matrix.

The coefficients of the returned matrix are of type `complex(eltype(‚Ñ±))`. For a
different output type, use [fourier_matrix!](@ref).
"""
function fourier_matrix(‚Ñ±, k)
    return fourier_matrix!(zeros(complex(eltype(‚Ñ±)), size(‚Ñ±)...), ‚Ñ±, k)
end


"""
    apply(‚Ñ±, x)

Return the grid `y` that results from applying the convolution operator `‚Ñ±` to
the input grid `x`.

The sizes of `x` and `y` are

    size(x) == (N..., ncols)
    size(y) == (N..., nrows)

where

    N = grid_size(‚Ñ±)

and

    (nrows, ncols) == size(‚Ñ±).

"""
function apply(‚Ñ±, x)
    ùí© = CartesianIndices(grid_size(‚Ñ±))
    d = dimensionality(‚Ñ±)
    y = fft(x, 2:(d+1))
    for n ‚àà ùí©
        apply_fourier!(view(y, :, n), ‚Ñ±, n, y[:, n])
    end
    # TODO: use in-place FFT
    return ifft(y, 2:(d+1))
end


function apply(‚Ñ±, x, plan)
    y = plan * x
    for n ‚àà CartesianIndices(size(y)[2:end])
        apply_fourier!(view(y, :, n), ‚Ñ±, n, y[:, n])
    end
    # TODO: Use in-place FFT
    return plan \ y
end


export dimensionality, grid_size, apply_fourier!, apply_fourier, fourier_matrix!, fourier_matrix, apply

include("Conductivity.jl")
include("Elasticity.jl")
include("Grid.jl")
include("Brick.jl")
include("Bri17.jl")

end
